buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net/' }
        mavenCentral()
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
    }
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'
apply plugin: 'maven-publish'

version = "1.2.4"
group = "com.silvaniastudios.roads" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "Furenikus_Roads"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: 'snapshot', version: '20171003-1.12'
    //makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'debug'
        }
    }
}

repositories {
    mavenLocal()
    maven {
        name "Progwml6 maven"
        url "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        name "ChickenBones Maven"
        url "https://chickenbones.net/maven/"
    }
    maven {
        name "CoFH Maven"
        url "https://maven.covers1624.net"
    }
}

dependencies {
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft 'net.minecraftforge:forge:1.12.2-14.23.5.2860'

    // compile against the JEI API but do not include it at runtime
    compileOnly("mezz.jei:jei_1.12.2:4.15.0.289:api") //1.12.2 4.15.0.289
    // at runtime, use the full JEI jar
    //runtimeOnly("mezz.jei:jei_1.12.2:4.15.0.289")

    compileOnly("cofh:RedstoneFlux:1.12-2.1.0.6:universal")
    compileOnly("cofh:CoFHCore:1.12.2-4.6.0.+:universal")
    compileOnly("cofh:CoFHWorld:1.12.2-1.2.0.+:universal")
    compileOnly("cofh:ThermalFoundation:1.12.2-2.6.0.+:universal")
    compileOnly("cofh:ThermalDynamics:1.12.2-2.5.5.+:universal")
    compileOnly("cofh:ThermalExpansion:1.12.2-5.5.4.+:universal")

    //implementation files("libs/CodeChickenLib-1.12.2-3.2.3.358-deobf.jar")

    //runtimeOnly fg.deobf("codechicken:CodeChickenLib:1.12.2-3.2.3.+:universal")
}

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
                "Specification-Title"     : project.name,
                "Specification-Vendor"    : "Silvania Studios",
                "Specification-Version"   : "1", // We are version 1 of ourselves
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : "${version}",
                "Implementation-Vendor"   : "Silvania Studios",
                "Implementation-Timestamp": getDate()
        ])
    }
}

// Process resources
processResources {
    // Replace tokens in mcmod.info
    inputs.properties(['version': project.version + "_" + getDate(), 'mcversion': '1.12.2'])

    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info' // optional

        // Replace tokens in mcmod.info
        expand 'version': project.version + "_" + getDate(), 'mcversion': '1.12.2'
    }
}

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar')
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
//publish.dependsOn('reobfJar')

publishing {
    publications {
        mavenJava(MavenPublication) {
            artifact jar
        }
    }
    repositories {
        maven {
            url "file:///${project.projectDir}/mcmodsrepo"
        }
    }
}

sourceSets {
    main {
        output.resourcesDir = output.classesDir
    }
}

static String getDate() {
    return new Date().format("yyMMdd'T'HHmmssZ")
}

task printVersionNumber {
    doLast {
        println project.version
    }
}